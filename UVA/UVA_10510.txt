Background
	At some time, there were several Cactus based problems in ICPC and Japanian OI. 
	Right now, kind of out-dated topic, but much fun & benifical to solve
	
Le Trong Dat: some code are AC on judge but wrong, e.g. this test case
	1
	4 5
	0 1
	1 3
	3 0
	1 2
	2 0
	The answer is NO.

https://github.com/quangloc99/CompetitiveProgramming/blob/master/UVA/10510.cpp	
https://github.com/achrafmam2/CompetitiveProgramming/blob/master/UVA/10510.cc
https://github.com/LeTrongDat/CompetitiveProgramming/blob/master/UVA/10510.cpp
http://codeforces.com/blog/entry/4018
	First you see if it is a SCC. Then you run 1 dfs, with vectors seen[], and finished[]. What you are looking for is if a the dfs reaches a finished node, that would mean that that some edge takes part in more than one cicle, and it is not a cactus. Because we know every node is in a cicle, and if we reach a finished node, we ca "re-use" part of the cicle from that node and make a new cicle using the same edge, it is not easy to convince yourself of this, but if you make a few drawings, you will see.


===
Fails in above case
	https://github.com/goswami-rahul/competitive-coding/blob/master/CompetitiveProgramming/uva/10510.cpp
	https://www.ugrad.cs.ubc.ca/~cs490/sec202/notes/graph/cactus.cpp	
